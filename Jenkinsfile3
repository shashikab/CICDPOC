// This is a Jenkins Pipeline script
pipeline {
    // Define the agent - here 'any' means it will run on any available Jenkins agent (computer)
    agent any
   
    // Define environment variables if needed (for example, usernames, passwords, etc.)
    environment {
        // In a real project, you would store these as Jenkins credentials securely.
        APIM_USERNAME = 'admin'
        APIM_PASSWORD = 'admin'
    // Jenkins sets HOME automatically; WORKSPACE points to the repo root
        RULESET = "${env.WORKSPACE}/.spectral.yml"
        SPEC_PATH = "${env.WORKSPACE}/SampleAPI/Definitions/swagger.yaml"

    }

    // Stages are like steps in a recipe.
    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code from the repository..."
                // This pulls the latest code from your Git repository.
                git url: 'https://github.com/shashikab/CICDPOC.git',
                branch: 'test'
            }
        }
 
 
 
        stage('Install apictl') {
            steps {
                echo "Installing the apictl tool..."
                // Run a shell command to download and install apictl.
                sh '''
                    # Download the Linux version of apictl (adjust URL/version if needed)
                    curl -L -o apictl.tar.gz "https://github.com/wso2/product-apim-tooling/releases/download/v4.5.0/apictl-4.5.0-darwin-arm64.tar.gz"
                   
                    # Create a temporary folder for extraction
                    mkdir -p /tmp/apictl
                    tar -xzvf apictl.tar.gz -C /tmp/apictl
                   
                    # List files to see where the binary is
                    ls -la /tmp/apictl
                   
                    # Check if the binary is extracted directly or inside a folder.
                    if [ -f "/tmp/apictl/apictl" ]; then
                      echo "Found apictl binary directly."
                      mv /tmp/apictl/apictl ~/apictl
                    elif [ -f "/tmp/apictl/apictl/apictl" ]; then
                      echo "Found apictl binary inside a folder."
                      mv /tmp/apictl/apictl/apictl ~/apictl
                    else
                      echo "apictl binary not found!"
                      exit 1
                    fi
                   
                    # Make the binary executable
                    chmod +x ~/apictl
                   
                    # Add the directory containing the binary to the PATH
                    export PATH=~/apictl:$PATH
                    echo "Installed apictl version:"
                    ~/apictl version
                '''
            }
        }

        stage('Configure APIM Environment') {
            steps {
                echo "Configuring the APIM environment..."
                // This command sets up a connection to the API Manager.
                sh '''
                    # Remove any previous "dev" environment (ignore errors if it doesn't exist)
                    #~/apictl remove env dev || true
                   ~/apictl remove env test || true
                   #~/apictl remove env prod || true


                   
                    # Set a timeout variable (optional)
                    export APICLIENT_TIMEOUT=120
                   
                    # Add a new environment called "dev" which points to your APIM instance.
                    # Here we assume APIM is running on localhost. Adjust the URL as required.
                   # ~/apictl add env dev --apim https://localhost:9443
                     ~/apictl add env test --apim https://localhost:9453
                    #  ~/apictl add env prod --apim https://localhost:9463
                '''
            }
        }

        stage('Login to APIM dev') {
            steps {
                echo "Logging in to APIM..."
                // Login to APIM securely by piping the password.
                sh '''
                    echo "${APIM_PASSWORD}" | ~/apictl login test --insecure -u ${APIM_USERNAME} --password-stdin -k
                '''
            }
        }
       
        //stage('Validate API to dev') {
            //steps {
           //     echo "Deploying the API project..."
          //      sh '''
           //         ~/apictl import api --file ./SwaggerPetstore-1.0.7 --environment dev -k --update --rotate-revision --dry-run
           //     '''
          //  }
       // }
       
       stage('Validate API to dev') {
      steps {
        echo "Running dry-run validation of API…"
        script {
          // run dry-run and capture output
          def output = sh(
            script: "~/apictl import api --file ./SwaggerPetstore-1.0.7 --environment test -k --update --rotate-revision --dry-run",
            returnStdout: true
          ).trim()
          echo output

          // if any line contains “ERROR”, fail the build
          if (output.toLowerCase().contains("error")) {
            error("Dry-run validation failed — found ERROR")
          }
        }
      }
    }
       
        

        stage('Deploy API to dev') {
            steps {
                echo "Deploying the API project..."
                sh '''
                    ~/apictl import api --file ./SwaggerPetstore-1.0.7 --environment test -k --update --rotate-revision
                '''
            }
        }
        
        

       
    }


    // After all stages, this block runs regardless of the result.
    post {
        always {
            echo "Jenkins Pipeline execution completed."
        }
    }
}
