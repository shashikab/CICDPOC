pipeline {
    agent any

 

    environment {
        APIM_USERNAME = 'admin'
        APIM_PASSWORD = 'admin'
        API_NAME      = 'SwaggerPetstore'
        API_VERSION   = '1.0.7'
        GIT_REPO_SSH  = 'git@github.com:shashikab/CICDPOC.git'
        TARGET_BRANCH = 'dev'
        OAS_FILE      = '/Users/shashika/.jenkins/workspace/Job_1_Init/git-init/swagger.yaml'
    }

    stages {
        stage('Install apictl') {
            steps {
                echo "Installing the apictl tool..."
                sh '''
                    curl -L -o apictl.tar.gz \
                      "https://github.com/wso2/product-apim-tooling/releases/download/v4.4.1/apictl-4.4.1-darwin-arm64.tar.gz"
                    mkdir -p /tmp/apictl
                    tar -xzvf apictl.tar.gz -C /tmp/apictl

                    if [ -f "/tmp/apictl/apictl" ]; then
                      mv /tmp/apictl/apictl ~/apictl
                    else
                      mv /tmp/apictl/apictl/apictl ~/apictl
                    fi

                    chmod +x ~/apictl
                    export PATH=~/apictl:$PATH
                    ~/apictl version
                '''
            }
        }

        stage('Push to Main') {
  steps {
    withCredentials([usernamePassword(
      credentialsId: '0974d876-1b01-46b2-bf2c-4f3cdecd3502',
      usernameVariable: 'GIT_USERNAME',
      passwordVariable: 'GIT_PASSWORD'
    )]) {
      sh '''
        set -e

        # 0) Route ALL https://github.com URLs through the injected creds (keeps logs cleaner)
        git config --global url."https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/".insteadOf "https://github.com/"

        # 1) Fresh clone (HTTPS, not SSH)
        rm -rf git-init
        git clone https://github.com/shashikab/CICDPOC.git git-init

        # 2) OAS path (use the file inside the cloned repo)
        OAS_FILE_PATH="${WORKSPACE}/git-init/swagger.yaml"

        # (Optional) If you really need a temp copy, uncomment next two lines:
        # mkdir -p "${WORKSPACE}/tmp"
        # cp -f "${WORKSPACE}/git-init/swagger.yaml" "${WORKSPACE}/tmp/swagger.yaml"

        # 3) Initialize the API in the cloned workspace using apictl
        ~/apictl init "${WORKSPACE}/git-init/SampleAPI" \
          --oas "${OAS_FILE_PATH}" \
          --force

        # 4) Remove stray top-level swagger.yaml in repo root if you donâ€™t want it committed
        if [ -f "${WORKSPACE}/git-init/swagger.yaml" ]; then
          rm -f "${WORKSPACE}/git-init/swagger.yaml"
        fi

        # 5) Git user + branch
        cd "${WORKSPACE}/git-init"
        git config user.name  "${GIT_USERNAME}"
        git config user.email "${GIT_USERNAME}@users.noreply.github.com"

        # Make sure target branch exists locally; create it if remote is missing
        if git ls-remote --exit-code --heads origin "${TARGET_BRANCH}" > /dev/null 2>&1; then
          git fetch origin "${TARGET_BRANCH}"
          git checkout -B "${TARGET_BRANCH}" "origin/${TARGET_BRANCH}"
        else
          git checkout -B "${TARGET_BRANCH}"
        fi

        # 6) Stage, commit (only if changes), and push
        git add --all
        if ! git diff --cached --quiet; then
          git commit -m "Automated export of ${API_NAME} v${API_VERSION}, build #${BUILD_NUMBER}"
          git push -u origin "${TARGET_BRANCH}"
        else
          echo "No changes to commit."
        fi
      '''
    }
  }
}

    }

    post {
        always {
            echo "Pipeline finished."
        }
    }
}
