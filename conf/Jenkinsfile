pipeline {
    agent any

 

    environment {
        APIM_USERNAME = 'admin'
        APIM_PASSWORD = 'admin'
        API_NAME      = 'SwaggerPetstore'
        API_VERSION   = '1.0.7'
        GIT_REPO_SSH  = 'git@github.com:shashikab/CICDPOC.git'
        TARGET_BRANCH = 'dev'
        OAS_FILE      = '/Users/shashika/.jenkins/workspace/Job_1_Init/git-init/swagger.yaml'
    }

    stages {
        stage('Install apictl') {
            steps {
                echo "Installing the apictl tool..."
                sh '''
                    curl -L -o apictl.tar.gz \
                      "https://github.com/wso2/product-apim-tooling/releases/download/v4.4.1/apictl-4.4.1-darwin-arm64.tar.gz"
                    mkdir -p /tmp/apictl
                    tar -xzvf apictl.tar.gz -C /tmp/apictl

                    if [ -f "/tmp/apictl/apictl" ]; then
                      mv /tmp/apictl/apictl ~/apictl
                    else
                      mv /tmp/apictl/apictl/apictl ~/apictl
                    fi

                    chmod +x ~/apictl
                    export PATH=~/apictl:$PATH
                    ~/apictl version
                '''
            }
        }

        stage('Push to Main') {
  steps {
    withCredentials([usernamePassword(
      credentialsId: '0974d876-1b01-46b2-bf2c-4f3cdecd3502',
      usernameVariable: 'GIT_USERNAME',
      passwordVariable: 'GIT_PASSWORD'
    )]) {
      sh '''
        set -e

        # Avoid using any cached/stale macOS keychain helpers
        git config --global credential.helper ""

        # Create a minimal askpass script so Git can read username/token non-interactively
        ASK=$(mktemp)
        cat > "$ASK" <<'EOF'
#!/usr/bin/env bash
case "$1" in
  *Username*) echo "$GIT_USERNAME" ;;
  *Password*) echo "$GIT_PASSWORD" ;;
esac
EOF
        chmod +x "$ASK"

        # 1) Fresh clone over HTTPS (no creds in the URL)
        rm -rf git-init
        GIT_ASKPASS="$ASK" git clone https://github.com/shashikab/CICDPOC.git git-init

        # 2) apictl init using the swagger inside the repo
        OAS_FILE_PATH="${WORKSPACE}/git-init/swagger.yaml"
        ~/apictl init "${WORKSPACE}/git-init/SampleAPI" --oas "${OAS_FILE_PATH}" --force
        [ -f "${WORKSPACE}/git-init/swagger.yaml" ] && rm -f "${WORKSPACE}/git-init/swagger.yaml"

        # 3) Git identity & branch setup
        cd "${WORKSPACE}/git-init"
        git config user.name  "${GIT_USERNAME}"
        git config user.email "${GIT_USERNAME}@users.noreply.github.com"

        if git ls-remote --exit-code --heads origin "${TARGET_BRANCH}" > /dev/null 2>&1; then
          git fetch origin "${TARGET_BRANCH}"
          git checkout -B "${TARGET_BRANCH}" "origin/${TARGET_BRANCH}"
        else
          git checkout -B "${TARGET_BRANCH}"
        fi

        # 4) Commit if there are changes, then push using askpass
        git add --all
        if ! git diff --cached --quiet; then
          git commit -m "Automated export of ${API_NAME} v${API_VERSION}, build #${BUILD_NUMBER}"
          GIT_ASKPASS="$ASK" git push -u origin "${TARGET_BRANCH}"
        else
          echo "No changes to commit."
        fi
      '''
    }
  }
}


    }

    post {
        always {
            echo "Pipeline finished."
        }
    }
}
